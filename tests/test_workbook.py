import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import unittest
from sheets.workbook import Workbook
from sheets.cell_error_type import CellErrorType
import sheets 
from decimal import Decimal

class TestWorkbook(unittest.TestCase):
    def setUp(self):
        self.workbook = Workbook()

    def test_new_sheet_num_sheets(self):
        # Test sheet.num_sheets() works properly.
        self.assertEqual(self.workbook.num_sheets(), 0)

        self.workbook.new_sheet("Sheet1")
        self.assertEqual(self.workbook.num_sheets(), 1)

        self.workbook.new_sheet("Sheet2")
        self.assertEqual(self.workbook.num_sheets(), 2)

    def test_new_sheet_list_sheets(self):
        # Test sheet.list_sheets() works properly.
        self.workbook.new_sheet("Sheet1")
        self.workbook.new_sheet("Sheet2")

        sheets = self.workbook.list_sheets()
        # notice this list preserves the order in which the sheets were added
        self.assertEqual(sheets, ["Sheet1", "Sheet2"])

    def test_new_sheet_basic(self):
        # Test adding a valid sheet name
        self.workbook.new_sheet("Sheet1")
        self.assertEqual(self.workbook.num_sheets(), 1)

        sheets = self.workbook.list_sheets()
        self.assertEqual(sheets, ["Sheet1"])
    
    def test_new_sheet_case_insensitive(self):
        # After adding “July Totals” (preserving the case), "july totals" cannot 
        # be added to the same workbook.
        self.workbook.new_sheet("July Totals")
        with self.assertRaises(ValueError):
            self.workbook.new_sheet("july totals")
    
    def test_new_sheet_no_name_provided(self):
        # Tests a new sheet is autogenerated. No exception should occur.
        self.workbook.new_sheet()
        self.assertEqual(self.workbook.list_sheets(), ["Sheet1"])
    
    def test_new_sheet_with_only_whitespace_raises_error(self):
        with self.assertRaises(ValueError):
            self.workbook.new_sheet(" ")

    def test_new_sheet_with_leading_whitespace_raises_error(self):
        # Whitespace in the middle is user choice and shouldn't throw exception.
        with self.assertRaises(ValueError):
            self.workbook.new_sheet(" Hi")

    def test_new_sheet_with_trailing_whitespace_raises_error(self):
        with self.assertRaises(ValueError):
            self.workbook.new_sheet("Hi ")

    def test_new_sheet_with_whitespace_on_both_ends_raises_error(self):
        with self.assertRaises(ValueError):
            self.workbook.new_sheet(" Hi ")

    def test_new_sheet_with_whitespace_in_middle_is_allowed(self):
        self.workbook.new_sheet("Hi      there")
        self.assertEqual(self.workbook.list_sheets(), ["Hi      there"])
    
    def test_new_sheet_single_quotes(self):
        with self.assertRaises(ValueError):
            self.workbook.new_sheet("Sheet'1")

    def test_new_sheet_double_quotes(self):
        with self.assertRaises(ValueError):
            self.workbook.new_sheet('Sheet"1')
    
    def test_new_sheet_invalid_punctuation_at_end(self):
        with self.assertRaises(ValueError):
            self.workbook.new_sheet("Sheet1<>")
    
    def test_new_sheet_invalid_punctuation_all_throughout(self):
        with self.assertRaises(ValueError):
            self.workbook.new_sheet("[Sheet1]")

    def test_new_sheet_autogenerate(self):
        self.workbook.new_sheet()
        self.assertEqual(self.workbook.num_sheets(), 1)

        sheets = self.workbook.list_sheets()
        self.assertTrue("Sheet1" in sheets)
    
    def test_new_sheet_autogenerate_complex(self):
        self.workbook.new_sheet("Sheet2")
        self.workbook.new_sheet("Sheet4")        
        self.workbook.new_sheet()
        self.workbook.new_sheet()
        sheets = self.workbook.list_sheets()
        self.assertEqual(sheets, ["Sheet2", "Sheet4", "Sheet1", "Sheet3"])

    def test_new_sheet_empty_name(self):
        with self.assertRaises(ValueError):
            self.workbook.new_sheet("")

        self.assertEqual(self.workbook.num_sheets(), 0)

    def test_new_sheet_existing_name(self):
        self.workbook.new_sheet("Sheet1")

        with self.assertRaises(ValueError):
            self.workbook.new_sheet("Sheet1")

        self.assertEqual(self.workbook.num_sheets(), 1)
    
    def test_del_sheet_existing_sheet(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.new_sheet("Sheet2")

        self.workbook.del_sheet("Sheet1")
        self.assertEqual(self.workbook.num_sheets(), 1)

        sheets = self.workbook.list_sheets()
        self.assertEqual(sheets, ["Sheet2"])

    def test_del_sheet_non_existent_sheet(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.new_sheet("Sheet2")

        with self.assertRaises(KeyError):
            self.workbook.del_sheet("NonExistentSheet")
    
    def test_del_sheet_bad_reference(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.new_sheet("Sheet2")

        self.workbook.set_cell_contents("Sheet1", "A1", "=Sheet2!A1 + 2")

        self.assertEqual(self.workbook.get_cell_value("Sheet1", "A1"), 2)

        self.workbook.del_sheet("Sheet2")

        value = self.workbook.get_cell_value("Sheet1", "A1")
        self.assertIsInstance(value, sheets.CellError)
        self.assertEqual(value.get_type(), CellErrorType.BAD_REFERENCE)

        # Add a new sheet with the same name as the deleted sheet
        self.workbook.new_sheet("Sheet2")
        self.assertEqual(self.workbook.num_sheets(), 2)
        # Check that the cell is not an error
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "A1"), 2)

    def test_get_sheet_extent_existing_sheets(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.new_sheet("Sheet2")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (0, 0))

        extent2 = self.workbook.get_sheet_extent("Sheet2")
        self.assertEqual(extent2, (0, 0))

    def test_get_sheet_extent_complex(self):
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "F6")
        self.workbook.set_cell_contents("Sheet1", "K9")
        self.workbook.set_cell_contents("Sheet1", "D8")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (11, 9))

    def test_get_sheet_extent_simple(self):
        """
        A sheet with the only value in cell A1 should have extent (1, 1).
        """
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "A1", "10")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (1, 1))

    def test_get_sheet_extent_simple2(self):
        """
        A sheet with the only value in cell D14 should have extent (4, 14).
        """
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "D14", "10")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (4, 14))
    
    def test_get_sheet_extent_formula(self):
        """
        If we have a cell A1 which is set to the value of D4, then the extent of 
        the sheet is (1, 1) if D4 = None even though it is part of the formula 
        for A1.
        """
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "A1", "=D14")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (1, 1))
    
    def test_get_extent_grows_with_formula_non_none_value(self):
        """
        If A1 = D14, D14 = D15, and D15 is a tangible value, then D15 SHOULD
        be counted towards the extent.
        """
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "A1", "=D14")
        self.assertEqual(self.workbook.get_sheet_extent("Sheet1"), (1, 1))

        self.workbook.set_cell_contents("Sheet1", "D14", "=D15")
        self.workbook.set_cell_contents("Sheet1", "D15", "100")
        self.assertEqual(self.workbook.get_sheet_extent("Sheet1"), (4, 15))
    
    def test_get_sheet_extent_does_not_grow_with_none_value_formulas(self):
        """
        If A1 = D14 and D14 = D15, the extent should still be (0, 0) since these
        references all have None values.
        """
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "A1", "=D14")
        self.workbook.set_cell_contents("Sheet1", "D14", "=D15")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (1, 1))
    
    def test_extent_grows_after_implicit_reference_updated(self):
        """
        If a cell A1 initially implicitly references a cell D14, D14 shouldn't
        count towards the extent. Then later if D14 is explicitly set to a 
        non-None value, the extent SHOULD grow.
        """
        self.workbook.new_sheet("Sheet1")
        self.workbook.set_cell_contents("Sheet1", "A1", "=D14")
        self.workbook.set_cell_contents("Sheet1", "D14", "10")
        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (4, 14))

    def test_get_sheet_extent_shrinks(self):
        """
        A sheet's extent should shrink as the maximal cell's contents are cleared.
        """
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "A1", "10")
        self.workbook.set_cell_contents("Sheet1", "B1", "20")
        self.workbook.set_cell_contents("Sheet1", "C1", "30")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (3, 1))

        # Clear the maximal cell's contents.
        self.workbook.set_cell_contents("Sheet1", "C1")

        extent2 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent2, (2, 1))
    
    def test_extent_shrinks_when_formula_cells_are_cleared(self):
        """
        If we have a chain of cell references that evaluate to a tangible value
        and then we clear the value of the cell at the end of the chain, the
        extent should shrink.
        """
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "A1", "=D14")
        self.assertEqual(self.workbook.get_sheet_extent("Sheet1"), (1, 1))

        self.workbook.set_cell_contents("Sheet1", "D14", "=D15")
        self.workbook.set_cell_contents("Sheet1", "D15", "100")
        self.assertEqual(self.workbook.get_sheet_extent("Sheet1"), (4, 15))

        # Notice that the extent shrinks to (1, 1), not (4, 14) because D14
        # has a None value as soon as D15 is cleared.
        self.workbook.set_cell_contents("Sheet1", "D15")
        self.assertEqual(self.workbook.get_sheet_extent("Sheet1"), (1, 1))
        
    def test_get_sheet_extent_grow_shrink(self):
        """
        Adds 100 cells and tests that the extent grows to accomodate them
        Then deletes 50 cells and tests that the extent shrinks to accomodate them.
        """
        self.workbook.new_sheet("Sheet1")

        for i in range(1, 100):
            self.workbook.set_cell_contents("Sheet1", f"A{i}", "10")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (1, 99))

        for i in range(50, 100):
            self.workbook.set_cell_contents("Sheet1", f"A{i}")
        
        extent2 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent2, (1, 49))

    def test_get_sheet_extent_non_existent_sheet(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.new_sheet("Sheet2")

        with self.assertRaises(KeyError):
            self.workbook.get_sheet_extent("NonExistentSheet")
    
    def test_get_sheet_extent_case_insensitive(self):
        """
        The Workbook's get_sheet_extent() function should take case-insensitive sheet names.
        """
        self.workbook.new_sheet("Sheet1")
        self.workbook.new_sheet("Sheet2")

        extent1 = self.workbook.get_sheet_extent("sheet1")
        self.assertEqual(extent1, (0, 0))

        extent2 = self.workbook.get_sheet_extent("sHeEt2")
        self.assertEqual(extent2, (0, 0))

    def test_get_sheet_extent_clear_all(self):
        """
        A sheet's extent should shrink to 0 if all cell contents are cleared.
        """
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "A1", "10")
        self.workbook.set_cell_contents("Sheet1", "B1", "20")
        self.workbook.set_cell_contents("Sheet1", "C1", "30")

        extent1 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent1, (3, 1))

        self.workbook.set_cell_contents("Sheet1", "A1")
        self.workbook.set_cell_contents("Sheet1", "B1")
        self.workbook.set_cell_contents("Sheet1", "C1")

        extent2 = self.workbook.get_sheet_extent("Sheet1")
        self.assertEqual(extent2, (0, 0))

    def test_set_cell_contents_for_new_cell(self):
        self.workbook.new_sheet("Sheet1")

        self.workbook.set_cell_contents("Sheet1", "A1", "10")

        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "A1"), "10")
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "A1"), 10)
    
    def test_set_cell_contents_for_existing_cell(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.set_cell_contents("Sheet1", "A1", "10")
        # check that the cell is properly updated
        self.workbook.set_cell_contents("Sheet1", "A1", "20")

        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "A1"), "20")
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "A1"), 20)

    def test_set_cell_contents_with_formulas(self):
        # Create a new sheet
        self.workbook.new_sheet("Sheet1")

        # Set cell A1 with a numeric value
        self.workbook.set_cell_contents("Sheet1", "A1", "10")

        # Set cell B1 with a formula referencing A1
        self.workbook.set_cell_contents("Sheet1", "B1", "=A1*2")

        # Set cell C1 with a formula referencing B1
        self.workbook.set_cell_contents("Sheet1", "C1", "=B1+5")

        # Test that cell values are correctly calculated
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "A1"), 10)
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "B1"), 20)
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "C1"), 25)

        # Test that cell contents are correctly stored
        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "A1"), "10")
        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "B1"), "=A1*2")
        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "C1"), "=B1+5")

    def test_update_referenced_cell(self):
        # Create a new sheet
        self.workbook.new_sheet("Sheet1")

        # Set cell A1 with a numeric value
        self.workbook.set_cell_contents("Sheet1", "A1", "10")

        # Set cell B1 with a formula referencing A1
        self.workbook.set_cell_contents("Sheet1", "B1", "=A1*2")

        # Test initial values
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "A1"), 10)
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "B1"), 20)

        # Update the value of cell A1
        self.workbook.set_cell_contents("Sheet1", "A1", "5")

        # Test that referenced cells are updated
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "A1"), 5)
        self.assertEqual(self.workbook.get_cell_value("Sheet1", "B1"), 10)
        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "B1"), "=A1*2")
    
    def test_bad_ref_goes_away_after_referenced_sheet_created(self):
        """
        If cell A refers to Sheet2 which DNE exist yet, A should be a 
        BAD_REFERENCE error. But once Sheet1 is created, the BAD_REFERENCE error 
        should go away.
        """
        self.workbook.new_sheet("Sheet1")
        self.workbook.set_cell_contents("Sheet1", "A1", "=Sheet2!A1")
        assert self.workbook.get_cell_value("Sheet1", "A1").get_type() == CellErrorType.BAD_REFERENCE

        self.workbook.new_sheet("Sheet2")
        assert self.workbook.get_cell_value("Sheet1", "A1") == Decimal('0')

    def test_case_insensitivity_sheet_names(self):
        self.workbook.new_sheet("Sheet1")
        with self.assertRaises(ValueError):
            self.workbook.new_sheet("sheet1")

        self.workbook.del_sheet("SHEET1")  # names are case-insensitive
        with self.assertRaises(KeyError):
            self.workbook.get_sheet_extent("Sheet1")

    def test_invalid_cell_locations(self):
        self.workbook.new_sheet("Sheet1")
        with self.assertRaises(ValueError):
            self.workbook.set_cell_contents("Sheet1", "InvalidCell", "123")

    def test_cell_content_formatting(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.set_cell_contents("Sheet1", "A1", "   123   ")

        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "A1"), "123")

    def test_auto_generated_sheet_names(self):
        _, name1 = self.workbook.new_sheet()
        _, name2 = self.workbook.new_sheet()
        self.assertNotEqual(name1, name2)
        self.assertTrue(name1.startswith("Sheet"))
        self.assertTrue(name2.startswith("Sheet"))

    def test_case_insensitive_sheet_access(self):
        self.workbook.new_sheet("TestSheet")
        extent = self.workbook.get_sheet_extent("testsheet")
        self.assertEqual(extent, (0, 0))

    def test_deleting_sheets_updates_state(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.new_sheet("Sheet2")
        self.workbook.del_sheet("Sheet1")

        with self.assertRaises(KeyError):
            self.workbook.get_sheet_extent("Sheet1")
        
        self.assertEqual(len(self.workbook.list_sheets()), 1)
        self.assertEqual(self.workbook.list_sheets()[0], "Sheet2")

    def test_update_cell_contents_various_types(self):
        self.workbook.new_sheet("Sheet1")
        self.workbook.set_cell_contents("Sheet1", "A1", "Test String")
        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "A1"), "Test String")
        self.workbook.set_cell_contents("Sheet1", "A1", "100")
        self.assertEqual(self.workbook.get_cell_contents("Sheet1", "A1"), "100")
        self.workbook.set_cell_contents("Sheet1", "A1", None)
        self.assertIsNone(self.workbook.get_cell_contents("Sheet1", "A1"))

    def test_operations_on_nonexistent_sheets(self):
        with self.assertRaises(KeyError):
            self.workbook.get_sheet_extent("NonExistentSheet")

        with self.assertRaises(KeyError):
            self.workbook.set_cell_contents("NonExistentSheet", "A1", "Test")

        with self.assertRaises(KeyError):
            self.workbook.get_cell_contents("NonExistentSheet", "A1")

        with self.assertRaises(KeyError):
            self.workbook.del_sheet("NonExistentSheet")

    def test_valid_punctuation_sheet_names(self):
        # Allowed punctuation characters from spec:
        valid_name = ".?!,:;!@#$%^&*()-_"
        try:
            _, created_name = self.workbook.new_sheet(valid_name)
            self.assertEqual(created_name, valid_name)
        except ValueError:
            self.fail(f"Workbook raised ValueError unexpectedly for valid sheet name '{valid_name}'")

    def test_empty_cell_simple(self):
        """
        A cell that references a cell set to None should have a value of 0.
        """
        self.workbook.new_sheet("EmptyCellSheet")
        self.workbook.set_cell_contents("EmptyCellSheet", "A1", None)

        self.workbook.set_cell_contents("EmptyCellSheet", "B1", "=A1")
        self.assertEqual(self.workbook.get_cell_value("EmptyCellSheet", "B1"), Decimal('0'))

    def test_empty_cell_complex(self):
        self.workbook.new_sheet("EmptyCellSheet")
        self.workbook.set_cell_contents("EmptyCellSheet", "a1", None)

        self.workbook.set_cell_contents("EmptyCellSheet", "b1", "=a1+5")
        self.assertEqual(self.workbook.get_cell_value("EmptyCellSheet", "b1"), Decimal('5'))

        self.workbook.set_cell_contents("EmptyCellSheet", "b1", "=a1*5")
        self.assertEqual(self.workbook.get_cell_value("EmptyCellSheet", "b1"), Decimal('0'))

        self.workbook.set_cell_contents("EmptyCellSheet", "b1", "=a1")
        self.assertEqual(self.workbook.get_cell_value("EmptyCellSheet", "b1"), Decimal('0'))

        self.workbook.set_cell_contents("EmptyCellSheet", "b1", "=\"hello\"&a1")
        self.assertEqual(self.workbook.get_cell_value("EmptyCellSheet", "b1"), "hello")
    
    def test_set_cell_contents_to_OOB_location_raises_error(self):
        self.workbook.new_sheet("OutOfBoundsSheet")
        with self.assertRaises(ValueError):
            self.workbook.set_cell_contents("OutOfBoundsSheet", "ZZZZ10000")

    def test_set_cell_contents_to_OOB_reference_creates_bad_reference(self):
        self.workbook.new_sheet("OutOfBoundsSheet")
        self.workbook.set_cell_contents("OutOfBoundsSheet", "A1", "=ZZZZ10000")
        value = self.workbook.get_cell_value("OutOfBoundsSheet", "A1")
        self.assertIsInstance(value, sheets.CellError)
        self.assertEqual(value.get_type(), CellErrorType.BAD_REFERENCE)

    def test_self_circular_reference_implicit(self):
        self.workbook.new_sheet("SelfCircleSheet")
        self.workbook.set_cell_contents("SelfCircleSheet", "A1", "=A1")

        value = self.workbook.get_cell_value("SelfCircleSheet", "A1")
        self.assertIsInstance(value, sheets.CellError)
        self.assertEqual(value.get_type(), CellErrorType.CIRCULAR_REFERENCE)

    def test_self_circular_reference_explicit(self):
        self.workbook.new_sheet("SelfCircleSheet")
        self.workbook.set_cell_contents("SelfCircleSheet", "A1", "=SelfCircleSheet!a1")

        value = self.workbook.get_cell_value("SelfCircleSheet", "A1")
        self.assertIsInstance(value, sheets.CellError)
        self.assertEqual(value.get_type(), CellErrorType.CIRCULAR_REFERENCE)
    
    def test_almost_out_of_bounds_reference_has_no_error(self):
        """Cells that refer to locations <= ZZZZ9999 should not be BAD_REFERENCE errors"""
        self.workbook.new_sheet("AlmostOutOfBoundsSheet")
        self.workbook.new_sheet("Sheet1")
        self.workbook.set_cell_contents("AlmostOutOfBoundsSheet", "A1", "=Sheet1!ZZZZ9999")

        self.assertEqual(self.workbook.get_cell_value("AlmostOutOfBoundsSheet", "A1"), Decimal('0'))

    def test_out_of_bounds_bad_reference_row(self):
        """Cells that refer to locations > ZZZZ9999 should be BAD_REFERENCE errors"""
        self.workbook.new_sheet("OutOfBoundsSheet")
        self.workbook.new_sheet("Sheet1")
        self.workbook.set_cell_contents("OutOfBoundsSheet", "A1", "=Sheet1!ZZZZ10000")

        value = self.workbook.get_cell_value("OutOfBoundsSheet", "A1")
        self.assertIsInstance(value, sheets.CellError)
        self.assertEqual(value.get_type(), CellErrorType.BAD_REFERENCE)

    def test_out_of_bounds_bad_reference_col(self):
        self.workbook.new_sheet("OutOfBoundsSheet")
        self.workbook.new_sheet("Sheet1")
        self.workbook.set_cell_contents("OutOfBoundsSheet", "A1", "=Sheet1!AAAAA9999")

        value = self.workbook.get_cell_value("OutOfBoundsSheet", "A1")
        self.assertIsInstance(value, sheets.CellError)
        self.assertEqual(value.get_type(), CellErrorType.BAD_REFERENCE)

    def tearDown(self):
        del self.workbook

if __name__ == '__main__':
    unittest.main()
